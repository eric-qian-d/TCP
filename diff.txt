diff --git a/kernel/defs.h b/kernel/defs.h
index ad79b65..26ac113 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -70,6 +70,9 @@ void            net_tx_udp(struct mbuf*, uint32, uint16, uint16);
 // sysnet.c
 void            sockinit(void);
 int             sockalloc(struct file **, uint32, uint16, uint16);
+void            sockclose(struct sock*, int);
+int             sockread(struct sock*, uint64, int);
+int             sockwrite(struct sock*, uint64, int);
 void            sockrecvudp(struct mbuf*, uint32, uint16, uint16);
 
 // ramdisk.c
diff --git a/kernel/e1000.c b/kernel/e1000.c
index 12ee026..97fc0d2 100644
--- a/kernel/e1000.c
+++ b/kernel/e1000.c
@@ -50,7 +50,7 @@ e1000_init(uint32 *xregs)
     panic("e1000");
   regs[E1000_TDLEN] = sizeof(tx_ring);
   regs[E1000_TDH] = regs[E1000_TDT] = 0;
-  
+
   // [E1000 14.4] Receive initialization
   memset(rx_ring, 0, sizeof(rx_ring));
   for (i = 0; i < RX_RING_SIZE; i++) {
@@ -85,7 +85,7 @@ e1000_init(uint32 *xregs)
     E1000_RCTL_BAM |                 // enable broadcast
     E1000_RCTL_SZ_2048 |             // 2048-byte rx buffers
     E1000_RCTL_SECRC;                // strip CRC
-  
+
   // ask e1000 for receive interrupts.
   regs[E1000_RDTR] = 0; // interrupt after every received packet (no timer)
   regs[E1000_RADV] = 0; // interrupt after every packet (no timer)
@@ -102,7 +102,33 @@ e1000_transmit(struct mbuf *m)
   // the TX descriptor ring so that the e1000 sends it. Stash
   // a pointer so that it can be freed after sending.
   //
-  return -1;
+  printf("T1\n");
+  int current_position = regs[E1000_TDT];
+  if ((tx_ring[current_position].status & E1000_TXD_STAT_DD) == 0) {
+    //previous transmission still in flight
+    return 1;
+  }
+  //do a conditional check
+  if (tx_mbufs[current_position] != 0)
+    mbuffree(tx_mbufs[current_position]);
+  printf("T2\n");
+  tx_ring[current_position].addr = (uint64)m->head;
+  tx_ring[current_position].length = m->len;
+  tx_ring[current_position].status = 0;
+  tx_ring[current_position].cso = 0;
+  tx_ring[current_position].cmd = E1000_TXD_CMD_RS;
+  tx_ring[current_position].css = 0;
+  tx_ring[current_position].special = 0;
+  if (m->next == 0) {
+    tx_ring[current_position].cmd |= E1000_TXD_CMD_EOP ;
+  }
+
+  tx_mbufs[current_position] = m;
+
+  int next_position = (current_position + 1)%TX_RING_SIZE;
+  regs[E1000_TDT] = next_position;
+
+  return 0;
 }
 
 static void
@@ -114,6 +140,23 @@ e1000_recv(void)
   // Check for packets that have arrived from the e1000
   // Create and deliver an mbuf for each packet (using net_rx()).
   //
+
+  int next_position = (regs[E1000_RDT] + 1)%RX_RING_SIZE;
+  struct rx_desc next_desc = rx_ring[next_position];
+  if ((next_desc.status & E1000_RXD_STAT_DD) == 0) {
+    //nothing to receive
+    return;
+  }
+  printf("REC\n");
+  struct mbuf *next_mbuf = rx_mbufs[next_position];
+  mbufput(next_mbuf, next_desc.length);
+  net_rx(next_mbuf);
+  struct mbuf *m = mbufalloc(next_desc.length);
+  rx_ring[next_position].addr = (uint64)m->head;
+  rx_ring[next_position].status = next_desc.status & ~E1000_RXD_STAT_DD;
+
+  regs[E1000_RDT] = next_position;
+  return;
 }
 
 void
diff --git a/kernel/e1000_dev.h b/kernel/e1000_dev.h
index 9b462df..85a9567 100644
--- a/kernel/e1000_dev.h
+++ b/kernel/e1000_dev.h
@@ -101,10 +101,10 @@ struct tx_desc
 {
   uint64 addr;
   uint16 length;
-  uint8 cso;
+  uint8 cso; //not necessary
   uint8 cmd;
   uint8 status;
-  uint8 css;
+  uint8 css; //not necessary
   uint16 special;
 };
 
diff --git a/kernel/file.c b/kernel/file.c
index 671e44c..5d453ee 100644
--- a/kernel/file.c
+++ b/kernel/file.c
@@ -75,6 +75,8 @@ fileclose(struct file *f)
 
   if(ff.type == FD_PIPE){
     pipeclose(ff.pipe, ff.writable);
+  } else if(ff.type == FD_SOCK){
+    sockclose(ff.sock, ff.writable);
   } else if(ff.type == FD_INODE || ff.type == FD_DEVICE){
     begin_op(ff.ip->dev);
     iput(ff.ip);
@@ -89,7 +91,7 @@ filestat(struct file *f, uint64 addr)
 {
   struct proc *p = myproc();
   struct stat st;
-  
+
   if(f->type == FD_INODE || f->type == FD_DEVICE){
     ilock(f->ip);
     stati(f->ip, &st);
@@ -113,6 +115,8 @@ fileread(struct file *f, uint64 addr, int n)
 
   if(f->type == FD_PIPE){
     r = piperead(f->pipe, addr, n);
+  } else if(f->type == FD_SOCK){
+    r = sockread(f->sock, addr, n);
   } else if(f->type == FD_DEVICE){
     if(f->major < 0 || f->major >= NDEV || !devsw[f->major].read)
       return -1;
@@ -141,6 +145,8 @@ filewrite(struct file *f, uint64 addr, int n)
 
   if(f->type == FD_PIPE){
     ret = pipewrite(f->pipe, addr, n);
+  } else if(f->type == FD_SOCK){
+    ret = sockwrite(f->sock, addr, n);
   } else if(f->type == FD_DEVICE){
     if(f->major < 0 || f->major >= NDEV || !devsw[f->major].write)
       return -1;
@@ -179,4 +185,3 @@ filewrite(struct file *f, uint64 addr, int n)
 
   return ret;
 }
-
diff --git a/kernel/net.c b/kernel/net.c
index 137ea2b..e49abf3 100644
--- a/kernel/net.c
+++ b/kernel/net.c
@@ -66,7 +66,7 @@ struct mbuf *
 mbufalloc(unsigned int headroom)
 {
   struct mbuf *m;
- 
+
   if (headroom > MBUF_SIZE)
     return 0;
   m = kalloc();
@@ -222,6 +222,7 @@ net_tx_arp(uint16 op, uint8 dmac[ETHADDR_LEN], uint32 dip)
 {
   struct mbuf *m;
   struct arp *arphdr;
+  printf("t arp\n");
 
   m = mbufalloc(MBUF_DEFAULT_HEADROOM);
   if (!m)
@@ -253,6 +254,7 @@ net_rx_arp(struct mbuf *m)
   struct arp *arphdr;
   uint8 smac[ETHADDR_LEN];
   uint32 sip, tip;
+  printf("r arp\n");
 
   arphdr = mbufpullhdr(m, *arphdr);
   if (!arphdr)
@@ -288,7 +290,7 @@ net_rx_udp(struct mbuf *m, uint16 len, struct ip *iphdr)
   struct udp *udphdr;
   uint32 sip;
   uint16 sport, dport;
-
+  printf("r udp\n");
 
   udphdr = mbufpullhdr(m, *udphdr);
   if (!udphdr)
@@ -325,7 +327,7 @@ net_rx_ip(struct mbuf *m)
 
   iphdr = mbufpullhdr(m, *iphdr);
   if (!iphdr)
-	  goto fail;
+    goto fail;
 
   // check IP version and header len
   if (iphdr->ip_vhl != ((4 << 4) | (20 >> 2)))
@@ -365,10 +367,17 @@ void net_rx(struct mbuf *m)
   }
 
   type = ntohs(ethhdr->type);
-  if (type == ETHTYPE_IP)
+  if (type == ETHTYPE_IP) {
+    printf("IP\n");
     net_rx_ip(m);
-  else if (type == ETHTYPE_ARP)
+  }
+  else if (type == ETHTYPE_ARP) {
+    printf("ARP\n");
     net_rx_arp(m);
-  else
+  }
+  else {
+    printf("WTF\n");
+    printf("%u", type);
     mbuffree(m);
+  }
 }
diff --git a/kernel/sysnet.c b/kernel/sysnet.c
index 5eaeb68..16882b8 100644
--- a/kernel/sysnet.c
+++ b/kernel/sysnet.c
@@ -61,7 +61,7 @@ sockalloc(struct file **f, uint32 raddr, uint16 lport, uint16 rport)
   while (pos) {
     if (pos->raddr == raddr &&
         pos->lport == lport &&
-	pos->rport == rport) {
+  pos->rport == rport) {
       release(&lock);
       goto bad;
     }
@@ -87,6 +87,81 @@ bad:
 // and writing for network sockets.
 //
 
+void
+sockclose(struct sock *si, int writable) {
+  struct sock *pos, *next;
+  acquire(&si->lock);
+
+  // free outstanding mbufs
+  while(!mbufq_empty(&si->rxq)) {
+    mbuffree(mbufq_pophead(&si->rxq));
+  }
+
+  // remove from sockets
+  acquire(&lock);
+  pos = sockets;
+  if (pos->raddr == si->raddr &&
+      pos->lport == si->lport &&
+  pos->rport == si->rport) {
+    sockets = pos->next;
+  } else {
+    while(pos->next) {
+      next = pos->next;
+      if (next->raddr == si->raddr &&
+          next->lport == si->lport &&
+      next->rport == si->rport) {
+        pos->next = next->next;
+        break;
+      }
+    }
+  }
+  release(&lock);
+
+  // clean up
+  release(&si->lock);
+  kfree((char*)si);
+}
+
+int
+sockwrite(struct sock *si, uint64 addr, int n) {
+  struct mbuf *m;
+  struct proc *pr = myproc();
+
+  m = mbufalloc(MBUF_DEFAULT_HEADROOM);
+
+  acquire(&si->lock);
+  if (copyin(pr->pagetable, mbufput(m, n), addr, n) == -1) {
+    return -1;
+  }
+  net_tx_udp(m, si->raddr ,si->lport, si->rport);
+  release(&si->lock);
+
+  return n;
+}
+
+int
+sockread(struct sock *si, uint64 addr, int n) {
+  struct mbuf *m;
+  struct proc *pr = myproc();
+  int i;
+
+  acquire(&si->lock);
+  while(mbufq_empty(&si->rxq)) {
+    if(myproc()->killed){
+      release(&si->lock);
+      return -1;
+    }
+    sleep(&si->rxq, &si->lock);
+  }
+  m = mbufq_pophead(&si->rxq);
+  for(i = 0; i < n; i++){
+    if(copyout(pr->pagetable, addr + i, mbufpull(m, 1), 1) == -1)
+      break;
+  }
+  release(&si->lock);
+  return i;
+}
+
 // called by protocol handler layer to deliver UDP packets
 void
 sockrecvudp(struct mbuf *m, uint32 raddr, uint16 lport, uint16 rport)
@@ -98,5 +173,27 @@ sockrecvudp(struct mbuf *m, uint32 raddr, uint16 lport, uint16 rport)
   // any sleeping reader. Free the mbuf if there are no sockets
   // registered to handle it.
   //
-  mbuffree(m);
+  struct sock *si;
+  acquire(&lock);
+  si = sockets;
+  while(si) {
+    if (si->raddr == raddr &&
+        si->lport == lport &&
+  si->rport == rport) {
+      release(&lock);
+      break;
+    }
+    si = si->next;
+  }
+  if (!si) {
+    release(&lock);
+  }
+  if (si) {
+    acquire(&si->lock);
+    mbufq_pushtail(&si->rxq, m);
+    release(&si->lock);
+    wakeup(&si->rxq);
+  } else {
+    mbuffree(m);
+  }
 }
diff --git a/ping.py b/ping.py
index 95953f9..490a654 100644
--- a/ping.py
+++ b/ping.py
@@ -6,7 +6,7 @@ sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
 addr = ('localhost', int(sys.argv[1]))
 buf = "this is a ping!"
 
-while True:
+for i in range(20):
 	print >>sys.stderr, "pinging..."
 	sock.sendto(buf, ("127.0.0.1", int(sys.argv[1])))
 	time.sleep(1)
